	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	___arg_processing
___arg_processing:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	push	de
	push	hl
	call	___parse_args
	pop	de
	pop	de
	ld	de, (ix + 9)
	push	de
	push	hl
	call	___check_redirect
	pop	de
	pop	de
	ld	a, l
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	___parse_args
___parse_args:
	ld	hl, -10
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	de, 16
	ld	iy, 1
	ld	a, 32
BB1_1:
	ld	bc, 16
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jp	z, BB1_18
	ld	(ix - 6), iy
	ld	bc, 0
	ld	(ix - 7), a
	ld	c, a
	ld	hl, (ix - 3)
BB1_3:
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB1_17
	ld	(ix - 3), hl
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	or	a, a
	sbc	hl, bc
	jr	nz, BB1_6
	ld	hl, (ix - 3)
	inc	hl
	jr	BB1_3
BB1_6:
	ld	a, e
	cp	a, 34
	ld	l, -1
	jr	z, BB1_8
	ld	l, 0
BB1_8:
	ld	a, l
	and	a, 1
	ld	de, 0
	ld	e, a
	ld	iy, (ix - 3)
	ld	(ix - 10), de
	add	iy, de
	bit	0, l
	ld	a, 34
	jr	nz, BB1_10
	ld	a, (ix - 7)
BB1_10:
	ld	hl, (ix - 6)
	push	hl
	pop	de
	inc	de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	add	hl, bc
	ld	(hl), iy
	or	a, a
	sbc	hl, hl
	ld	(ix - 7), a
	ld	l, a
	ld	(ix - 6), hl
	ld	hl, (ix - 3)
	ld	bc, (ix - 10)
BB1_11:
	add	hl, bc
	push	bc
	pop	iy
	ld	c, (hl)
	ld	a, c
	or	a, a
	jr	z, BB1_18
	ld	a, c
	rlc	a
	sbc	hl, hl
	ld	a, c
	ld	l, c
	ld	bc, (ix - 6)
	or	a, a
	sbc	hl, bc
	jr	z, BB1_14
	lea	bc, iy
	inc	bc
	ld	hl, (ix - 3)
	jr	BB1_11
BB1_14:
	cp	a, 34
	ld	a, 32
	ld	hl, (ix - 3)
	jr	z, BB1_16
	ld	a, (ix - 7)
BB1_16:
	lea	bc, iy
	add	hl, bc
	ld	(hl), 0
	inc	hl
	ld	(ix - 3), hl
	push	de
	pop	iy
	ld	de, 16
	jp	BB1_1
BB1_17:
	ld	de, (ix - 6)
BB1_18:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	___check_redirect
___check_redirect:
	ld	hl, -15
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 3
	ld	iy, 1
	ld	a, iyl
BB2_1:
	lea	hl, iy
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	ld	de, (ix + 6)
	lea	bc, iy
BB2_2:
	push	hl
	pop	iy
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB2_29
	ld	(ix - 12), a
	ld	hl, (iy)
	ld	(ix - 3), hl
	inc	bc
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	hl, 0
	ld	(ix - 6), hl
	jp	p, BB2_5
	ld	hl, (iy + 3)
	ld	(ix - 6), hl
BB2_5:
	ld	hl, (ix - 3)
	ld	a, (hl)
	cp	a, 60
	jr	z, BB2_10
	lea	hl, iy + 3
	cp	a, 62
	ld	a, (ix - 12)
	jr	nz, BB2_2
	ld	(ix - 15), iy
	ld	iy, (ix - 3)
	lea	de, iy
	ld	a, (iy + 1)
	cp	a, 62
	ld	(ix - 9), bc
	jr	nz, BB2_15
	push	de
	pop	iy
	lea	iy, iy + 2
	ld	bc, (ix - 6)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jr	nz, BB2_19
	lea	de, iy
	jr	BB2_21
BB2_10:
	ld	de, (ix - 3)
	inc	de
	ld	hl, (ix - 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), bc
	jr	nz, BB2_12
	ld	hl, _.str
	ld	(ix - 3), hl
	ld	hl, _stdin
	ld	(ix - 12), hl
	ld	hl, 0
	jr	BB2_24
BB2_12:
	ld	(ix - 12), de
	ld	(ix - 15), iy
	ld	iy, (ix - 3)
	ld	a, (iy + 1)
	or	a, a
	ex	de, hl
	jr	z, BB2_14
	ld	de, (ix - 12)
BB2_14:
	ld	hl, _.str
	ld	(ix - 3), hl
	ld	hl, _stdin
	ld	(ix - 12), hl
	ld	hl, 0
	jr	BB2_23
BB2_15:
	inc	de
	ld	(ix - 3), de
	ld	de, (ix - 6)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jr	z, BB2_17
	or	a, a
	jr	z, BB2_18
BB2_17:
	ld	de, (ix - 3)
BB2_18:
	ld	bc, _.str.2
	jr	BB2_22
BB2_19:
	ld	(ix - 12), iy
	push	de
	pop	iy
	ld	a, (iy + 2)
	or	a, a
	push	bc
	pop	de
	jr	z, BB2_21
	ld	de, (ix - 12)
BB2_21:
	ld	bc, _.str.1
BB2_22:
	ld	(ix - 3), bc
	ld	bc, _stdout
	ld	(ix - 12), bc
BB2_23:
	ld	iy, (ix - 15)
BB2_24:
	ld	(iy), hl
	push	de
	pop	bc
	ex	de, hl
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	jr	nz, BB2_26
	ld	hl, 0
	ld	(iy + 3), hl
	jr	BB2_27
BB2_26:
	ld	hl, (ix - 9)
	dec	hl
	ld	(ix - 9), hl
BB2_27:
	ld	hl, (ix - 3)
	ld	de, (ix - 12)
	push	de
	push	hl
	push	bc
	call	_freopen
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB2_37
	ld	iy, (ix - 9)
	inc	iy
	xor	a, a
	ld	de, (ix + 9)
	ld	bc, 3
	jp	BB2_1
BB2_29:
	bit	0, a
	ld	hl, ___close_redir_files
	push	hl
	call	z, _atexit
	pop	hl
	ld	de, 2
	ld	bc, (ix + 6)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	iy, (ix + 9)
	jp	p, BB2_31
	ld	bc, 1
BB2_31:
	dec	bc
	lea	iy, iy + 3
	ld	de, 1
BB2_32:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_36
	ld	hl, (iy)
	ld	(ix - 3), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_35
	push	de
	pop	hl
	inc	hl
	ld	(ix - 9), hl
	ex	de, hl
	ld	(ix - 6), bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	lea	hl, iy
	ld	iy, (ix + 9)
	add	iy, bc
	ld	bc, (ix - 6)
	ld	de, (ix - 3)
	ld	(iy), de
	push	hl
	pop	iy
	ld	de, (ix - 9)
BB2_35:
	dec	bc
	lea	iy, iy + 3
	jr	BB2_32
BB2_36:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
BB2_37:
	ld	hl, 1
	push	hl
	call	_exit
	pop	hl
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	___get_redir_fname
___get_redir_fname:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB3_2
	ld	a, (iy)
	or	a, a
	jr	z, BB3_3
BB3_2:
	lea	hl, iy
BB3_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	___close_redir_files
___close_redir_files:
	ld	a, (_stdin)
	cp	a, 0
	call	pe, __setflag
	jp	m, BB4_2
	ld	hl, _stdin
	push	hl
	call	_fclose
	pop	hl
BB4_2:
	ld	a, (_stdout)
	cp	a, 0
	call	pe, __setflag
	jp	m, BB4_4
	ld	hl, _stdout
	push	hl
	call	_fclose
	pop	hl
BB4_4:
	ld	a, (_stderr)
	cp	a, 0
	call	pe, __setflag
	jp	m, BB4_6
	ld	hl, _stderr
	push	hl
	call	_fclose
	pop	hl
BB4_6:
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"r", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"a", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	"w", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 6c61664110f888c0285ae4c48b150c9a7a4361bb)"
	extern	_stdin
	extern	_stdout
	extern	_fclose
	extern	__Unwind_SjLj_Register
	extern	_stderr
	extern	__frameset
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	_exit
	extern	__imulu
	extern	_atexit
	extern	__frameset0
	extern	_freopen
